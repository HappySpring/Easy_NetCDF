function [ out_dim, data_out ] = FUN_nc_varget_enhanced_region_2_multifile( filelist, varname, dim_name, dim_limit, merge_dim_name, time_var_name, dim_varname )
% [ out_dim, data ] = FUN_nc_varget_enhanced_region_2( filelist, varname, dim_name, dim_limit, [time_var_name] )
% Advanced nc file loader
% time_var_name is optional
%
% -------------------------------------------------------------------------
% INPUT:
%      filelist  [struct array]: name and folder of the NetCDF file
%                 filelist must include 2 attributes, name and folder. For   
%                 each element of filelist (e.g. the ith one), the full path
%                 will be generated by fullfile( filelist(ith).folder, filelist(ith).name)
%
%      varname   [char]: name of the variable
%
%      dim_limit_str   [cell]: name of dimensions, like {'lon','lat'}
%               
%      dim_limit_limit [cell]: limit of dimensions, like {[-85 -55], [30 45]}
% 
%      merge_dim_name [string]: name of the dimension in which the variables 
%                 from different files will be concatenated. If merge_dim_name is
%                 empty, the variable will be concatenated after its last
%                 dimension.
%
%                 + Example 1: if you want to read gridded daily
%                   temperature given in [lon, lat, depth, time] from a set of
%                   files, and each file contains temperature in one day,
%                   the merge_dim_name should be 'time'. 
%
%                 + Example 2: if you want to read gridded daily temperature given in
%                   [lon, lat, depth], in which time is not given
%                   explicitly in each file, you can leave merge_dim_name
%                   empty.
%
%      time_var_name [char, optional]: name of the time axis
%           + variable defined by this will be loaded into time in matlab format (days since 0000-01-00)
%           + This is helpful for setting timelimit in a easy way, avoiding
%             calculating the timelimit from units in netcdf files.
%             For example, to read data between 02/15/2000 00:00 and
%             02/16/2000 00:00 from a netcdf file, which includes a time variable "ob_time" 
%             in units of "days since 2000-00-00 00:00", you need to set 
%             timelimit as [46 47] when time_var_name is empty. However, you
%             should set timelimit as [datenum(2000,2,15),
%             datenum(2000,2,16)] if the tiem_var_name is set to "ob_time".
%
%      dim_varname   [cell, optional]: name of the variable defining the axis at each dimension.
%           + by default, each axis is defined by a variable sharing the same name as the dimension. 
%           + "dim_varname{1} = nan" indicates that the axis is not defined
%                not defined by any variable in file. It will be defined 
%                as 1, 2, 3, ... Nx, where Nx is the length of the dimension.
%
% OUTPUT:
%      out_dim  : dimension info (e.g., longitude, latitude, if applicable)
%      data     : data extracted from the given netcdf file.  
% -------------------------------------------------------------------------
% Example: 
%
%   filename     = 'I:\Data\ECCO2\data1_cube92_latlon_quart_90S_90N\SALT_monthly.nc\SALT.1440x720x50.199210.nc';
%   varname      = 'SALT';
%   dim_name      = { 'LONGITUDE_T', 'LATITUDE_T', 'DEPTH_T', 'TIME' };
%   dim_limit     = {[-100 -50]+360, [20 50 ],  [0 500] , [-inf inf] };
%   time_var_name= 'TIME';
%   dim_varname  = {[-100 -50]+360, [20 50 ],  [0 500] , [-inf inf] };
%   [ out_dim, data ] = FUN_nc_varget_enhanced_region_2( filename, varname, dim_name, dim_limit, time_var_name );
% 
% ---- results ----
% out_dim = 
% 
%   struct with fields:
% 
%     LONGITUDE_T: [200x1 double]
%      LATITUDE_T: [120x1 double]
%         DEPTH_T: [23x1 double]
%            TIME: 10
%
% whos data
%   Name        Size                  Bytes  Class     Attributes
% 
%   data      200x120x23            4416000  double 
% -------------------------------------------------------------------------

% V1.21 By L. Chi,
%          fix a bug
%
%          `data_out = nan(size1);`  is replaced by `data_out = nan( [size1, 1] );`
%          to avoid errors when size1 is an 1x1 matrix.
% V1.20 By L. Chi, 
%          dimension can be given in random order. 
%          Add "dim_varname"
% V1.10 By L. Chi
% V1.00 By L. Chi

%% ## Set default value
if ~exist( 'time_var_name', 'var' ) 
    time_var_name = [];
end

if ~exist( 'dim_varname', 'var' ) || isempty( dim_varname )
    dim_varname = dim_name;
end

%% ## prepare dimensions

% ### get start/count for all dimensions ---------------------------------- 
% use the first file as the template

fn = fullfile( filelist(1).folder, filelist(1).name );

var_dim0 = FUN_nc_varget_sub_genStartCount_from_file( fn, varname, dim_name, dim_limit, time_var_name, dim_varname );
N_dim = length( var_dim0 );

% ### get merged variable info for all files ------------------------------
if ~isempty( merge_dim_name )
    % find the ind of merged dimension in the requested variable
    ind_merged_dim = find( strcmpi( {var_dim0.Name}, merge_dim_name ) );

    % find the limit and properties of the merged dimension.
    ind_merged_dim_in_limit = find( strcmpi( dim_name, merge_dim_name ) );
    if isempty( ind_merged_dim_in_limit )
        dim_limit_for_merged_var = [-inf inf];
        dim_varname_for_merged_var = [];
    else
        dim_limit_for_merged_var = dim_limit( ind_merged_dim_in_limit );
        dim_varname_for_merged_var = dim_varname{ ind_merged_dim_in_limit };
    end

    % get dimension info
    for ii = 1:length( filelist )
        fn = fullfile( filelist(ii).folder, filelist(ii).name );
        var_dim_merged(ii) = FUN_nc_varget_sub_genStartCount_from_file( fn, [], merge_dim_name, dim_limit_for_merged_var, time_var_name, dim_varname_for_merged_var );
        var_dim_merged(ii).value = var_dim_merged(ii).value(:)';
        if isnan( dim_varname_for_merged_var ) % The axis at the merged dimension is not given in the file.
            var_dim_merged(ii).value  = ii * 100 + [1:var_dim_merged(ii).count] * 99 / var_dim_merged(ii).count ;
        end
    end

    ind_in_output = nan( length( filelist ), 2 );
    ind_in_output(1,1) = 1;
    ind_in_output(1,2) = var_dim_merged(1).count;

    for ii = 2:length( var_dim_merged ) 
        ind_in_output(ii,1) = ind_in_output(ii-1,2) + 1;
        ind_in_output(ii,2) = ind_in_output(ii,1) +  var_dim_merged(ii).count - 1;
    end

    Nm = ind_in_output(end, 2); % length in the merged dim.
    
else 
    
    ind_merged_dim = length(var_dim0) + 1;
    
    for ii = 1:length( filelist ) 
        var_dim_merged(ii).value  = ii;
        var_dim_merged(ii).count  = 1;
        
        ind_in_output(ii,1)       = ii;
        ind_in_output(ii,2)       = ii;
    end
    
    Nm = ind_in_output(end, 2); % length in the merged dim.
    
    N_dim = N_dim + 1;
    
end

%% load data
    
    size1 =  [var_dim0.count] ;
    size1(ind_merged_dim) = Nm;
    data_out = nan( [size1, 1] );    % an additional dimension is added to avoid errors when size1 is 1x1.
    
    nc_start = [ var_dim0(:).start ];
    nc_count = [ var_dim0(:).count ];
    nc_strid = ones(size(nc_start));
    
    if ind_merged_dim ~= N_dim
        warning('Please use with caution. This has not been fully tested yet!')
        data_out =  FUN_exchage_dim( data_out, ind_merged_dim, N_dim );
        nc_start =  FUN_exchage_dim( data_out, ind_merged_dim, N_dim );
        nc_count =  FUN_exchage_dim( data_out, ind_merged_dim, N_dim );
    end
    
    Nx = prod( size1(1:end-1) );
    data_out = reshape( data_out, Nx, Nm );
    
    for ii = 1:length( filelist )
        
        fn = fullfile( filelist(ii).folder, filelist(ii).name );
        
        if ~isempty( merge_dim_name )
            if var_dim_merged(ii).count == 0
                disp(['Skip ' fn])
                continue
            else
                disp(['Loading ' fn])
            end

            nc_start(end) = var_dim_merged(ii).start;
            nc_count(end) = var_dim_merged(ii).count;

            tem = FUN_nc_varget_enhanced_region( fn, varname, nc_start, nc_count, nc_strid );
        else
            disp(['Loading ' fn])
            tem = FUN_nc_varget_enhanced_region( fn, varname, nc_start, nc_count, nc_strid );
        end
        
        if ind_merged_dim ~= N_dim
            tem =  FUN_exchage_dim( tem, ind_merged_dim, N_dim );
        end
        
        data_out(:, ind_in_output(ii,1):ind_in_output(ii,2))  = reshape( tem, Nx, var_dim_merged(ii).count );
    end
    
    
    
%% output
for ii = 1:length(var_dim0)
    out_dim.(var_dim0(ii).value_name) = var_dim0(ii).value;
end

if ~isempty( merge_dim_name )
    out_dim.(var_dim0(ind_merged_dim).value_name) = [ var_dim_merged.value ];
else
    out_dim.merged_dim = [ var_dim_merged.value ];
end
%% sort
if ~isempty( merge_dim_name )
    [out_dim.(var_dim0(ind_merged_dim).value_name), sort_ind ] = sort( out_dim.(var_dim0(ind_merged_dim).value_name), 'ascend');
    data_out = data_out(:,sort_ind);
end
%% reshape
data_out = reshape( data_out, [size1, 1] );
if ind_merged_dim ~= N_dim
    data_out =  FUN_exchage_dim( data_out, ind_merged_dim, N_dim );
end
